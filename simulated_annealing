import math
import random

def nqueens_cost_function(solution):
    n = len(solution)
    attacks = 0
    for i in range(n):
        for j in range(i+1, n):
            if (solution[i][0] == solution[j][0] or
                solution[i][1] == solution[j][1] or
                abs(solution[i][0] - solution[j][0]) == abs(solution[i][1] - solution[j][1])):
                attacks += 1
    return attacks

def simulated_annealing(cost_function, initial_solution, temperature, cooling_rate, stopping_temperature):
    current_solution = initial_solution
    best_solution = initial_solution
    
    while temperature > stopping_temperature:
        # Generate a new solution by making a small change to the current solution
        new_solution = current_solution.copy()
        index_to_change = random.randint(0, len(current_solution) - 1)
        new_solution[index_to_change] = (random.uniform(0, len(initial_solution)), random.uniform(0, len(initial_solution)))
        
        # Calculate the costs of the current and new solutions
        current_cost = cost_function(current_solution)
        new_cost = cost_function(new_solution)
        
        # Decide whether to accept the new solution or stay with the current solution
        if new_cost < current_cost:
            current_solution = new_solution
            if new_cost < cost_function(best_solution):
                best_solution = new_solution
        else:
            delta = new_cost - current_cost
            acceptance_probability = math.exp(-delta / temperature)
            if random.random() < acceptance_probability:
                current_solution = new_solution
        
        # Reduce the temperature according to the cooling rate
        temperature *= cooling_rate
        
    return best_solution

n = 8
initial_solution = [(i, random.uniform(0, n)) for i in range(n)]
temperature = 100
cooling_rate = 0.95
stopping_temperature = 1e-8

best_solution = simulated_annealing(nqueens_cost_function, initial_solution, temperature, cooling_rate, stopping_temperature)

print("Best solution:", best_solution)
print("Number of attacks:", nqueens_cost_function(best_solution))
