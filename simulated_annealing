import math
import random
import numpy as np
from typing import List, Callable
import optimization_functions as optF

Solution = List[float]
OptFunction = Callable[[Solution], float]

def generateSolution(length : int, a : float, b: float) -> Solution:
    return [np.random.uniform(a, b) for _ in range(length)]

def simplePerturbation(solution: Solution, a : float, b: float) -> Solution:
    i = random.randrange(len(solution))
    solution[i] += np.random.uniform(-0.5, 0.5)
    if solution[i] > b:
        solution[i] = b
    if solution[i] < a:
        solution[i] = a
    return solution

def simulated_annealing(
        objectiveFunc : OptFunction, 
        solutionLen : int,
        a : float,
        b : float, 
        temperature : float, 
        coolingRate : float, 
        stopingTemp : float) \
            -> Solution:
    
    initialSol = generateSolution(solutionLen, a, b)
    print("InitialSolution:", initialSol)
    print("Objective Function value:", optF.rastrigin(initialSol))

    curSol = initialSol
    bestSol = initialSol
    
    while temperature > stopingTemp:
        newSol = simplePerturbation(curSol.copy(), a, b)
        curCost = objectiveFunc(curSol)
        newCost = objectiveFunc(newSol)
        
        delta = newCost - curCost
        if newCost < curCost:
            curSol = newSol
            if newCost < objectiveFunc(bestSol):
                bestSol = newSol
        else:
            if random.random() < math.exp(-delta / temperature):
                curSol = newSol
        
        temperature *= coolingRate
    
    print("Best solution:", bestSol)
    print("Objective Function value:", objectiveFunc(bestSol))
    return bestSol

temperature = 1000
coolingRate = 0.95
stopingTemp = 1e-8

bestSol = simulated_annealing(optF.rastrigin, 5, -5.12, 5.12, temperature, coolingRate, stopingTemp)
